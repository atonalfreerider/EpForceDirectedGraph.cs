// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ComputeForces

struct Point
{
    float3 position;
    float3 acceleration;
};

struct Spring
{
    bool connected;
    float Length;
    float K;
};

float Repulsion;
float Stiffness;
float CenterAttraction;
int numPoints;

// All of the points in the FDG;
RWStructuredBuffer<Point> readPointBuffer;
RWStructuredBuffer<Point> assignPointBuffer;
RWStructuredBuffer<Spring> springBuffer;

[numthreads(8, 8, 1)]
void ComputeForces(uint3 id : SV_DispatchThreadID)
{
    if (id.x != id.y)
    {
        // Apply Coulombs Law between two different points;
        float3 interPointVector = readPointBuffer[id.x].position - readPointBuffer[id.y].position;
        float distance = sqrt(interPointVector.x * interPointVector.x + interPointVector.y * interPointVector.y + interPointVector.z * interPointVector.z) + float(0.1);
        float3 normalizedDirection = interPointVector / distance;
        float3 force = (normalizedDirection * Repulsion) / (distance * float(0.5));

        if (springBuffer[id.x + id.y * numPoints].connected == true)
        {
            // apply Hookes Law between two points connected by a spring;
            float displacement = springBuffer[id.x + id.y * numPoints].Length - distance;
            force -= normalizedDirection * springBuffer[id.x + id.y * numPoints].K * displacement * float(-0.5);
        }

        assignPointBuffer[id.x].acceleration += force;
        assignPointBuffer[id.y].acceleration -= force;
    }
    else
    {
        // attract this point to center;
        float3 interPointVector = readPointBuffer[id.x].position;
        float distance = sqrt(interPointVector.x * interPointVector.x + interPointVector.y * interPointVector.y + interPointVector.z * interPointVector.z) + float(0.1);
        float3 normalizedDirection = interPointVector / distance;
        float3 force = normalizedDirection * Stiffness * distance * float(-1) * CenterAttraction;

        assignPointBuffer[id.x].acceleration += force;
    }
}
